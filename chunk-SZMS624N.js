import{Da as g,Ea as y,Ia as S,Ja as C,K as l,Ka as v,O as h,Ra as A,Ta as T,ab as x,c as u,ja as b,ta as d}from"./chunk-KCEZ4D7X.js";var w={brick_wall:{image:"assets/rooms/brick_wall.png"},cabin:{image:"assets/rooms/brick_wall.png"}};function B(a,e){a&1&&C(0,"img",0),a&2&&v("src",e.image,b)}var p=class a{roomType=T.required();roomData=A(()=>w[this.roomType()]);static \u0275fac=function(t){return new(t||a)};static \u0275cmp=d({type:a,selectors:[["app-room"]],inputs:{roomType:[1,"roomType"]},decls:1,vars:1,consts:[["alt","Room Image",1,"room-image",3,"src"]],template:function(t,o){if(t&1&&g(0,B,1,1,"img",0),t&2){let n;y((n=o.roomData())?0:-1,n)}},dependencies:[x],styles:["[_nghost-%COMP%]{display:block;width:100%;height:100%}[_nghost-%COMP%]   .room-image[_ngcontent-%COMP%]{width:100%}"],changeDetection:0})};var M={ambient_music:["assets/audio/ambient_1.mp3","assets/audio/ambient_2.mp3","assets/audio/ambient_3.mp3"],ghost:"assets/audio/ghost.mp3",man_scream:["assets/audio/man_scream_1.mp3"],scuttling:["assets/audio/scuttling_1.mp3"]},f=class a{audioContext;emitters={};audioBuffers={};ambientSource;preloadPromise;constructor(){this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.preloadPromise=this.preloadAllSounds()}preloadAllSounds(){return u(this,null,function*(){let e=[];for(let[t,o]of Object.entries(M)){let n=Array.isArray(o)?o:[o];this.audioBuffers[t]=[];for(let i of n){let s=this.loadSound(i).then(r=>{this.audioBuffers[t].push(r)}).catch(r=>{console.error(`Failed to load sound '${t}' from ${i}:`,r)});e.push(s)}}yield Promise.all(e),console.log("All sound files preloaded.",this.audioBuffers)})}getRandomBuffer(e){let t=this.audioBuffers[e];if(!t||t.length===0){console.error(`Sound '${String(e)}' not preloaded or has no buffers.`);return}let o=Math.floor(Math.random()*t.length);return t[o]}loadSound(e){return u(this,null,function*(){let o=yield(yield fetch(e)).arrayBuffer();return this.audioContext.decodeAudioData(o)})}ngOnDestroy(){this.audioContext.close()}playAmbientMusic(){return u(this,null,function*(){if(yield this.preloadPromise,this.ambientSource)return;let e=this.getRandomBuffer("ambient_music");e&&(this.ambientSource=this.audioContext.createBufferSource(),this.ambientSource.buffer=e,this.ambientSource.loop=!0,this.ambientSource.connect(this.audioContext.destination),this.ambientSource.start(0),console.log("Ambient music started."))})}stopAmbientMusic(){this.ambientSource&&(this.ambientSource.stop(),this.ambientSource=void 0,console.log("Ambient music stopped."))}setListenerRotation(e,t){let o=Math.sqrt(e*e+t*t),n=o>0?e/o:0,i=o>0?t/o:-1;this.setListenerOrientation(n,0,i,0,1,0)}setListenerPosition(e,t,o=1.8){let n=this.audioContext.listener,i=this.audioContext.currentTime;n.positionX.setValueAtTime(e,i),n.positionY.setValueAtTime(t,i),n.positionZ.setValueAtTime(o,i)}setListenerOrientation(e,t,o,n,i,s){let r=this.audioContext.listener,m=this.audioContext.currentTime;r.forwardX.setValueAtTime(e,m),r.forwardY.setValueAtTime(t,m),r.forwardZ.setValueAtTime(o,m),r.upX.setValueAtTime(n,m),r.upY.setValueAtTime(i,m),r.upZ.setValueAtTime(s,m)}addEmitter(e,t,o,n,i,s=!1){return u(this,null,function*(){if(yield this.preloadPromise,this.emitters[e]){console.warn(`Emitter with ID '${e}' already exists. Skipping.`);return}let r=this.getRandomBuffer(t);if(!r)return;let m=this.audioContext.createBufferSource(),c=this.audioContext.createPanner();m.buffer=r,m.loop=s,m.start(0),c.panningModel="HRTF",this.updateEmitterPosition(c,o,n,i),m.connect(c),c.connect(this.audioContext.destination),this.emitters[e]={id:e,source:m,panner:c,buffer:r},console.log(`Emitter '${e}' added and playing sound '${t}' at position (${o}, ${n}, ${i}).`)})}updateEmitterPosition(e,t,o,n){let i=typeof e=="string"?this.emitters[e]?.panner:e;if(!i){console.warn(`Panner not found for emitter '${e}'.`);return}let s=this.audioContext.currentTime;i.positionX.setValueAtTime(t,s),i.positionY.setValueAtTime(o,s),i.positionZ.setValueAtTime(n,s)}removeEmitter(e){let t=this.emitters[e];if(!t){console.warn(`Emitter with ID '${e}' not found.`);return}t.source.stop(),t.source.disconnect(),t.panner.disconnect(),delete this.emitters[e],console.log(`Emitter '${e}' removed.`)}playOneShotSound(e,t,o,n){return u(this,null,function*(){yield this.preloadPromise;let i=this.getRandomBuffer(e);if(!i)return;let s=this.audioContext.createBufferSource(),r=this.audioContext.createPanner();s.buffer=i,s.connect(r),r.connect(this.audioContext.destination),this.updateEmitterPosition(r,t,o,n),s.start(0),s.onended=()=>{s.disconnect(),r.disconnect()}})}static \u0275fac=function(t){return new(t||a)};static \u0275prov=l({token:a,factory:a.\u0275fac,providedIn:"root"})};var P=class a{audioService=h(f);ngOnInit(){this.audioService.playAmbientMusic()}ngOnDestroy(){this.audioService.stopAmbientMusic()}static \u0275fac=function(t){return new(t||a)};static \u0275cmp=d({type:a,selectors:[["app-demo"]],decls:1,vars:0,consts:[["roomType","brick_wall"]],template:function(t,o){t&1&&S(0,"app-room",0)},dependencies:[p],styles:["[_nghost-%COMP%]{width:1400px;max-width:100vw;max-height:100vh}"]})};export{P as Demo};
